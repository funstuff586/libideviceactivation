name: build

on:
  push:
  pull_request:
  schedule:
    - cron: '0 0 1 * *'

jobs:
  build-linux-ubuntu:
    runs-on: ubuntu-latest
    steps:
    - name: install dependencies
      run: |
          sudo apt-get update
          sudo apt-get install libcurl4-openssl-dev libxml2-dev
    - name: prepare environment
      run: |
          echo "target_triplet=`gcc -dumpmachine`" >> $GITHUB_ENV
    - name: fetch libplist
      uses: dawidd6/action-download-artifact@v6
      with:
        github_token: ${{secrets.GITHUB_TOKEN}}
        workflow: build.yml
        name: libplist-latest_${{env.target_triplet}}
        repo: libimobiledevice/libplist
    - name: fetch libusbmuxd
      uses: dawidd6/action-download-artifact@v6
      with:
        github_token: ${{secrets.GITHUB_TOKEN}}
        workflow: build.yml
        name: libusbmuxd-latest_${{env.target_triplet}}
        repo: libimobiledevice/libusbmuxd
    - name: fetch libimobiledevice-glue
      uses: dawidd6/action-download-artifact@v6
      with:
        github_token: ${{secrets.GITHUB_TOKEN}}
        workflow: build.yml
        name: libimobiledevice-glue-latest_${{env.target_triplet}}
        repo: libimobiledevice/libimobiledevice-glue
    - name: fetch libimobiledevice
      uses: dawidd6/action-download-artifact@v6
      with:
        github_token: ${{secrets.GITHUB_TOKEN}}
        workflow: build.yml
        name: libimobiledevice-latest_${{env.target_triplet}}
        repo: libimobiledevice/libimobiledevice
    - name: install external dependencies
      run: |
          mkdir extract
          for I in *.tar; do
            tar -C extract -xvf $I
          done
          rm -rf extract/lib
          sudo cp -r extract/* /
          sudo ldconfig
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: autogen
      run: ./autogen.sh PKG_CONFIG_PATH=/usr/local/lib/pkgconfig
    - name: make
      run: make
    - name: make install
      run: sudo make install
    - name: prepare artifact
      run: |
          mkdir -p dest
          DESTDIR=`pwd`/dest make install
          tar -C dest -cf libideviceactivation.tar usr
    - name: publish artifact
      uses: actions/upload-artifact@v4
      with:
        name: libideviceactivation-latest_${{env.target_triplet}}
        path: libideviceactivation.tar
  build-macOS:
    runs-on: macOS-latest
    steps:
    - name: install dependencies
      run: |
          if test -x "`which port`"; then
            sudo port install libtool autoconf automake pkgconfig
          else
            brew install libtool autoconf automake pkgconfig
          fi
      shell: bash
    - name: fetch libplist
      uses: dawidd6/action-download-artifact@v6
      with:
        github_token: ${{secrets.GITHUB_TOKEN}}
        workflow: build.yml
        name: libplist-latest_macOS
        repo: libimobiledevice/libplist
    - name: fetch libusbmuxd
      uses: dawidd6/action-download-artifact@v6
      with:
        github_token: ${{secrets.GITHUB_TOKEN}}
        workflow: build.yml
        name: libusbmuxd-latest_macOS
        repo: libimobiledevice/libusbmuxd
    - name: fetch libimobiledevice-glue
      uses: dawidd6/action-download-artifact@v6
      with:
        github_token: ${{secrets.GITHUB_TOKEN}}
        workflow: build.yml
        name: libimobiledevice-glue-latest_macOS
        repo: libimobiledevice/libimobiledevice-glue
    - name: fetch libimobiledevice
      uses: dawidd6/action-download-artifact@v6
      with:
        github_token: ${{secrets.GITHUB_TOKEN}}
        workflow: build.yml
        name: libimobiledevice-latest_macOS
        repo: libimobiledevice/libimobiledevice
    - name: install external dependencies
      run: |
          mkdir extract
          for I in *.tar; do
            tar -C extract -xvf $I
          done
          sudo cp -r extract/* /
    - uses: actions/checkout@v4
    - name: install additional requirements
      run: |
          SDKDIR=`xcrun --sdk macosx --show-sdk-path 2>/dev/null`
          echo "SDKDIR=$SDKDIR" >> $GITHUB_ENV
          TESTARCHS="arm64 x86_64"
          USEARCHS=
          for ARCH in $TESTARCHS; do
            if echo "int main(int argc, char **argv) { return 0; }" |clang -arch $ARCH -o /dev/null -isysroot $SDKDIR -x c - 2>/dev/null; then
              USEARCHS="$USEARCHS -arch $ARCH"
            fi
          done
          export CFLAGS="$USEARCHS -isysroot $SDKDIR"
          echo "Using CFLAGS: $CFLAGS"
          echo "BUILD_CFLAGS=$CFLAGS" >> $GITHUB_ENV
    - name: autogen
      run: |
          export CFLAGS="${{env.BUILD_CFLAGS}} -Wno-nullability-completeness -Wno-expansion-to-defined"
          echo "Using CFLAGS: $CFLAGS"
          ./autogen.sh PKG_CONFIG_PATH=/usr/local/lib/pkgconfig \
              libcurl_CFLAGS="-I${{env.SDKDIR}}/usr/include" libcurl_LIBS="-lcurl" \
              libxml2_CFLAGS="-I${{env.SDKDIR}}/usr/include" libxml2_LIBS="-lxml2" \
              libimobiledevice_CFLAGS="-I/usr/local/include" libimobiledevice_LIBS="-L/usr/local/lib -limobiledevice-1.0"
    - name: make
      run: make
    - name: make install
      run: sudo make install
    - name: prepare artifact
      run: |
          mkdir -p dest
          DESTDIR=`pwd`/dest make install
          tar -C dest -cf libideviceactivation.tar usr
    - name: publish artifact
      uses: actions/upload-artifact@v4
      with:
        name: libideviceactivation-latest_macOS
        path: libideviceactivation.tar
  build-windows:
    runs-on: windows-2019
    defaults:
      run:
        shell: msys2 {0}
    strategy:
      fail-fast: false
      matrix:
        include: [
          { msystem: MINGW64, arch: x86_64 },
          { msystem: MINGW32, arch: i686   }
        ]
    steps:
    - uses: msys2/setup-msys2@v2
      with:
        msystem: ${{ matrix.msystem }}
        release: false
        update: false
        install: >-
          base-devel
          git
          mingw-w64-${{ matrix.arch }}-gcc
          make
          libtool
          autoconf
          automake-wrapper
    - name: prepare environment
      run: |
          dest=`echo ${{ matrix.msystem }} |tr [:upper:] [:lower:]`
          echo "dest=$dest" >> $GITHUB_ENV
          echo "target_triplet=`gcc -dumpmachine`" >> $GITHUB_ENV
    - name: fetch libplist
      uses: dawidd6/action-download-artifact@v6
      with:
        github_token: ${{secrets.GITHUB_TOKEN}}
        workflow: build.yml
        name: libplist-latest_${{ matrix.arch }}-${{ env.dest }}
        repo: libimobiledevice/libplist
    - name: fetch libusbmuxd
      uses: dawidd6/action-download-artifact@v6
      with:
        github_token: ${{secrets.GITHUB_TOKEN}}
        workflow: build.yml
        name: libusbmuxd-latest_${{ matrix.arch }}-${{ env.dest }}
        repo: libimobiledevice/libusbmuxd
    - name: fetch libimobiledevice-glue
      uses: dawidd6/action-download-artifact@v6
      with:
        github_token: ${{secrets.GITHUB_TOKEN}}
        workflow: build.yml
        name: libimobiledevice-glue-latest_${{ matrix.arch }}-${{ env.dest }}
        repo: libimobiledevice/libimobiledevice-glue
    - name: fetch libimobiledevice
      uses: dawidd6/action-download-artifact@v6
      with:
        github_token: ${{secrets.GITHUB_TOKEN}}
        workflow: build.yml
        name: libimobiledevice-latest_${{ matrix.arch }}-${{ env.dest }}
        repo: libimobiledevice/libimobiledevice
    - name: install external dependencies
      run: |
          mkdir extract
          for I in *.tar; do
            tar -C extract -xvf $I
          done
          cp -r extract/* /
    - uses: actions/checkout@v4
    - name: install additional requirements
      run: |
          #
    - name: autogen
      run: ./autogen.sh CC=gcc CXX=g++
    - name: make
      run: make
    - name: make install
      run: make install
    - name: prepare artifact
      run: |
          mkdir -p dest
          DESTDIR=`pwd`/dest make install
          tar -C dest -cf libideviceactivation.tar ${{ env.dest }}
    - name: publish artifact
      uses: actions/upload-artifact@v4
      with:
        name: libideviceactivation-latest_${{ matrix.arch }}-${{ env.dest }}
        path: libideviceactivation.tar
ideviceactivation state
pkg config#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// libimobiledevice core headers
#include <libimobiledevice/libimobiledevice.h>
#include <libimobiledevice/lockdown.h>

// libideviceactivation header - the exact name might vary slightly.
// Ensure this header is available in your include path.
#include <libideviceactivation/libideviceactivation.h> // Or similar, e.g., ideviceactivation.h

int main(int argc, char **argv) {
    idevice_t device = NULL;
    lockdownd_client_t lockdown_client = NULL;
    // The client type for libideviceactivation will be defined in its header.
    // This is a placeholder name.
    idevice_activation_client_t activation_client = NULL;
    char *udid = NULL;
    int i;

    printf("Attempting to find iOS devices...\n");

    // 1. Discover connected iOS devices
    char **device_udids = NULL;
    int device_count = 0;
    if (idevice_get_device_list(&device_udids, &device_count) < 0) {
        fprintf(stderr, "ERROR: Could not get the list of connected devices.\n");
        return -1;
    }

    if (device_count == 0) {
        printf("No iOS devices found connected via USB.\n");
        idevice_device_list_free(device_udids);
        return 0;
    }

    printf("Found %d device(s):\n", device_count);
    for (i = 0; i < device_count; i++) {
        printf("  %d: %s\n", i + 1, device_udids[i]);
    }

    // For this example, let's try to connect to the first device found.
    // In a real application, you might let the user choose or search for a specific UDID.
    udid = strdup(device_udids[0]);
    idevice_device_list_free(device_udids); // Free the list returned by idevice_get_device_list

    printf("Attempting to connect to device with UDID: %s\n", udid);

    // 2. Create a device object for the target UDID
    // IDEVICE_LOOKUP_USBMUX ensures we are looking for USB-connected devices.
    if (idevice_new_with_options(&device, udid, IDEVICE_LOOKUP_USBMUX) != IDEVICE_E_SUCCESS) {
        fprintf(stderr, "ERROR: Could not connect to device with UDID %s. Make sure it's trusted.\n", udid);
        free(udid);
        return -1;
    }

    // 3. Establish a connection with the lockdownd service on the device
    // The third argument is a label for your client application.
    if (lockdownd_client_new_with_handshake(device, &lockdown_client, "my_activation_checker_app") != LOCKDOWN_E_SUCCESS) {
        fprintf(stderr, "ERROR: Could not connect to lockdownd on device %s.\n", udid);
        idevice_free(device);
        free(udid);
        return -1;
    }
    printf("Successfully connected to lockdownd service.\n");

    // 4. Use libideviceactivation
    // The following is conceptual and depends on the actual API provided by libideviceactivation.h
    // You'll need to refer to that header for actual function names, parameter types, and return values.

    // Hypothetical: Create an activation service client
    // The 'lockdown_client' might be passed directly, or you might need to start a specific service first.
    // idevice_activation_error_t act_err; // Hypothetical error type from libideviceactivation
    // act_err = idevice_activation_client_new(device, lockdown_client, &activation_client);

    // For example, if libideviceactivation uses a service descriptor:
    lockdownd_service_descriptor_t service = NULL;
    // The service name for activation needs to be known from libideviceactivation documentation or examples.
    // It might be something like "com.apple.mobileactivationd" or a custom one for libideviceactivation.
    // This is a placeholder:
    const char* activation_service_name = "com.apple.mobileactivationd"; // This is a guess, check docs!

    if (lockdownd_start_service(lockdown_client, activation_service_name, &service) != LOCKDOWN_E_SUCCESS || service == NULL || service->port == 0) {
        fprintf(stderr, "ERROR: Could not start the activation service '%s' on device %s.\n", activation_service_name, udid);
        lockdownd_client_free(lockdown_client);
        idevice_free(device);
        free(udid);
        if (service) lockdownd_service_descriptor_free(service);
        return -1;
    }
    printf("Successfully started activation service on port %d.\n", service->port);

    // Hypothetical: Create an activation client using the service
    idevice_activation_error_t act_err; // Assuming this enum/type exists
    act_err = idevice_activation_client_new(device, service, &activation_client); // Pass device and service

    install libimoibiledevices-utils
        
    

